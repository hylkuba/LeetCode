#include <iostream>
#include <vector>
#include <algorithm>

/**
 * @brief You are given an array of integers nums. Return the length of the longest 
subarray
 of nums which is either 
strictly increasing
 or 
strictly decreasing
.

 

Example 1:

Input: nums = [1,4,3,3,2]

Output: 2

Explanation:

The strictly increasing subarrays of nums are [1], [2], [3], [3], [4], and [1,4].

The strictly decreasing subarrays of nums are [1], [2], [3], [3], [4], [3,2], and [4,3].

Hence, we return 2.

Example 2:

Input: nums = [3,3,3,3]

Output: 1

Explanation:

The strictly increasing subarrays of nums are [3], [3], [3], and [3].

The strictly decreasing subarrays of nums are [3], [3], [3], and [3].

Hence, we return 1.

Example 3:

Input: nums = [3,2,1]

Output: 3

Explanation:

The strictly increasing subarrays of nums are [3], [2], and [1].

The strictly decreasing subarrays of nums are [3], [2], [1], [3,2], [2,1], and [3,2,1].

Hence, we return 3.

 

Constraints:

1 <= nums.length <= 50
1 <= nums[i] <= 50
 * 
 */

class Solution {
public:
    int longestMonotonicSubarray(std::vector<int>& nums) {
        int max = 1;
        int curr = 1;
        int prev = nums[0];

        for(int i = 1; i < nums.size(); i++) {
            if(prev < nums[i]) curr++;
            else curr = 1;

            prev = nums[i];
            max = std::max(max, curr);
        }

        curr = 1;
        prev = nums[0];
        for(int i = 1; i < nums.size(); i++) {
            if(prev > nums[i]) curr++;
            else curr = 1;

            prev = nums[i];
            max = std::max(max, curr);
        }

        return max;
    }
};

int main(void) {
    Solution sol;
    std::vector<int> nums = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    std::cout << sol.longestMonotonicSubarray(nums) << std::endl;
    return 0;
}